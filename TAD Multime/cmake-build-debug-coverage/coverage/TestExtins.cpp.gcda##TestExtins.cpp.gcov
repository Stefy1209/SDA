        -:    0:Source:/home/stefy0-0/CLionProjects/SAD/TAD Multime/TestExtins.cpp
        -:    0:Graph:/home/stefy0-0/CLionProjects/SAD/TAD Multime/cmake-build-debug-coverage/CMakeFiles/TAD_Multime.dir/TestExtins.cpp.gcno
        -:    0:Data:/home/stefy0-0/CLionProjects/SAD/TAD Multime/cmake-build-debug-coverage/CMakeFiles/TAD_Multime.dir/TestExtins.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by stefy0-0 on 24.03.2024.
        -:    3://
        -:    4:#include "Multime.h"
        -:    5:#include "IteratorMultime.h"
        -:    6:#include <assert.h>
        -:    7:#include "TestExtins.h"
        -:    8:
function _Z11testCreeazav called 1 returned 100% blocks executed 75%
        1:    9:void testCreeaza() {
        1:   10:    Multime m;
        1:   10-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   11:    assert(m.dim() == 0);
        1:   11-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   11-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   11-block  2
call    5 never executed
       1*:   12:    assert(m.vida() == true);
        1:   12-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   12-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   12-block  2
call    5 never executed
        -:   13:
       21:   14:    for (int i = -10; i < 10; i++) { //cautam in multimea vida
        1:   14-block  0
       20:   14-block  1
       21:   14-block  2
branch  0 taken 20
branch  1 taken 1 (fallthrough)
      20*:   15:        assert(m.cauta(i) == false);
       20:   15-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:   15-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 20
    %%%%%:   15-block  2
call    5 never executed
        -:   16:    }
       21:   17:    for (int i = -10; i < 10; i++) { //stergem din multimea vida
        1:   17-block  0
       20:   17-block  1
       21:   17-block  2
branch  0 taken 20
branch  1 taken 1 (fallthrough)
      20*:   18:        assert(m.sterge(i) == false);
       20:   18-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
       20:   18-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 20
    %%%%%:   18-block  2
call    5 never executed
        -:   19:    }
        -:   20:
        1:   21:    IteratorMultime im = m.iterator(); //iterator pe multimea vida ar trebui sa fie invalid din start
        1:   21-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   22:    assert(im.valid() == false);
        1:   22-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   22-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   22-block  2
call    5 never executed
        1:   23:}
        1:   23-block  0
call    0 returned 1
    $$$$$:   23-block  1
call    1 never executed
        -:   24:
        -:   25:
function _Z10testAdaugav called 1 returned 100% blocks executed 83%
        1:   26:void testAdauga() {
        -:   27:    int vverif[10];
        -:   28:    int iverif;
        -:   29:
        1:   30:    Multime m2;
        1:   30-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:   31:    for (int i = 0; i <= 3; i++) {
        1:   31-block  0
        4:   31-block  1
        5:   31-block  2
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:   32:        m2.adauga(i);
        4:   32-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -:   33:    }
        3:   34:    for (int i = 5; i > 3; i--) {
        1:   34-block  0
        2:   34-block  1
        3:   34-block  2
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:   35:        m2.adauga(i);
        2:   35-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   36:    }
        -:   37:    // verificam ordinea de extragere
        1:   38:    IteratorMultime im2 = m2.iterator();
        1:   38-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   39:    iverif = 0;
        7:   40:    while (im2.valid()){
        1:   40-block  0
        7:   40-block  1
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:   40-block  2
branch  3 taken 6
branch  4 taken 1 (fallthrough)
        6:   41:        vverif[iverif++]=im2.element();
        6:   41-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:   42:        im2.urmator();
        6:   42-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        -:   43:    }
       1*:   44:    assert((vverif[5]==5) &&(vverif[4]==4)&&(vverif[3]==3)&&(vverif[2]==2) &&(vverif[1]==1)&&(vverif[0]==0));
        1:   44-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   44-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   44-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:   44-block  3
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1:   44-block  4
branch  8 taken 1 (fallthrough)
branch  9 taken 0
        1:   44-block  5
branch 10 taken 1 (fallthrough)
branch 11 taken 0
    %%%%%:   44-block  6
call   12 never executed
       1*:   45:    assert(m2.vida() == false);
        1:   45-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   45-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   45-block  2
call    5 never executed
       1*:   46:    assert(m2.dim() == 6);
        1:   46-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   46-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   46-block  2
call    5 never executed
        -:   47:
        1:   48:    Multime m;
        1:   48-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:   49:    for (int i = 0; i <= 3; i++) {
        1:   49-block  0
        4:   49-block  1
        5:   49-block  2
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        4:   50:        m.adauga(i);
        4:   50-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -:   51:    }
        3:   52:    for (int i = 5; i > 3; i--) {
        1:   52-block  0
        2:   52-block  1
        3:   52-block  2
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:   53:        m.adauga(i);
        2:   53-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   54:    }
        -:   55:    // verificam ordinea de extragere
        1:   56:    IteratorMultime im = m.iterator();
        1:   56-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   57:    iverif = 0;
        7:   58:    while (im.valid()){
        1:   58-block  0
        7:   58-block  1
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:   58-block  2
branch  3 taken 6
branch  4 taken 1 (fallthrough)
        6:   59:        vverif[iverif++]=im.element();
        6:   59-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        6:   60:        im.urmator();
        6:   60-block  0
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
        -:   61:    }
       1*:   62:    assert((vverif[0]==0) &&(vverif[1]==1)&&(vverif[2]==2)&&(vverif[3]==3) &&(vverif[4]==4)&&(vverif[5]==5));
        1:   62-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   62-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   62-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:   62-block  3
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        1:   62-block  4
branch  8 taken 1 (fallthrough)
branch  9 taken 0
        1:   62-block  5
branch 10 taken 1 (fallthrough)
branch 11 taken 0
    %%%%%:   62-block  6
call   12 never executed
       1*:   63:    assert(m.vida() == false);
        1:   63-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   63-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   63-block  2
call    5 never executed
       1*:   64:    assert(m.dim() == 6);
        1:   64-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   64-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   64-block  2
call    5 never executed
        -:   65:
       31:   66:    for (int i = -10; i < 20; i++) { //mai adaugam elemente [-10, 20)
        1:   66-block  0
       30:   66-block  1
       31:   66-block  2
branch  0 taken 30
branch  1 taken 1 (fallthrough)
       30:   67:        m.adauga(i);
       30:   67-block  0
call    0 returned 30
branch  1 taken 30 (fallthrough)
branch  2 taken 0 (throw)
        -:   68:    }
       1*:   69:    assert(m.vida() == false);
        1:   69-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   69-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   69-block  2
call    5 never executed
       1*:   70:    assert(m.dim() == 30);
        1:   70-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   70-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   70-block  2
call    5 never executed
      201:   71:    for (int i = 100; i > -100; i--) { //mai adaugam elemente (-100, 100]
        1:   71-block  0
      200:   71-block  1
      201:   71-block  2
branch  0 taken 200
branch  1 taken 1 (fallthrough)
      200:   72:        m.adauga(i);
      200:   72-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
        -:   73:    }
       1*:   74:    assert(m.vida() == false);
        1:   74-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   74-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   74-block  2
call    5 never executed
       1*:   75:    assert(m.dim() == 200);
        1:   75-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   75-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   75-block  2
call    5 never executed
      401:   76:    for (int i = -200; i < 200; i++) {
        1:   76-block  0
      400:   76-block  1
      401:   76-block  2
branch  0 taken 400
branch  1 taken 1 (fallthrough)
      400:   77:        if (i <= -100) {
      400:   77-block  0
branch  0 taken 101 (fallthrough)
branch  1 taken 299
     101*:   78:            assert(m.cauta(i) == false);
      101:   78-block  0
call    0 returned 101
branch  1 taken 101 (fallthrough)
branch  2 taken 0 (throw)
      101:   78-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 101
    %%%%%:   78-block  2
call    5 never executed
        -:   79:        }
      299:   80:        else if (i < 0) {
      299:   80-block  0
branch  0 taken 99 (fallthrough)
branch  1 taken 200
      99*:   81:            assert(m.cauta(i) == true);
       99:   81-block  0
call    0 returned 99
branch  1 taken 99 (fallthrough)
branch  2 taken 0 (throw)
       99:   81-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 99
    %%%%%:   81-block  2
call    5 never executed
        -:   82:        }
      200:   83:        else if (i <= 100) {
      200:   83-block  0
branch  0 taken 101 (fallthrough)
branch  1 taken 99
     101*:   84:            assert(m.cauta(i) == true);
      101:   84-block  0
call    0 returned 101
branch  1 taken 101 (fallthrough)
branch  2 taken 0 (throw)
      101:   84-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 101
    %%%%%:   84-block  2
call    5 never executed
        -:   85:        }
        -:   86:        else {
      99*:   87:            assert(m.cauta(i) == false);
       99:   87-block  0
call    0 returned 99
branch  1 taken 99 (fallthrough)
branch  2 taken 0 (throw)
       99:   87-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 99
    %%%%%:   87-block  2
call    5 never executed
        -:   88:        }
        -:   89:    }
    20001:   90:    for (int i = 10000; i > -10000; i--) { //adaugam mult, si acum prima data adaugam valori mari, dupa aceea mici
        1:   90-block  0
    20000:   90-block  1
    20001:   90-block  2
branch  0 taken 20000
branch  1 taken 1 (fallthrough)
    20000:   91:        m.adauga(i);
    20000:   91-block  0
call    0 returned 20000
branch  1 taken 20000 (fallthrough)
branch  2 taken 0 (throw)
        -:   92:    }
       1*:   93:    assert(m.dim()==20000);
        1:   93-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   93-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   93-block  2
call    5 never executed
        1:   94:}
        1:   94-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:   94-block  1
call    2 never executed
    $$$$$:   94-block  2
call    3 never executed
        -:   95:
        -:   96:
function _Z10testStergev called 1 returned 100% blocks executed 80%
        1:   97:void testSterge() {
        1:   98:    Multime m;
        1:   98-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
      201:   99:    for (int i = -100; i < 100; i++) { //stergem din multimea vida
        1:   99-block  0
      200:   99-block  1
      201:   99-block  2
branch  0 taken 200
branch  1 taken 1 (fallthrough)
     200*:  100:        assert(m.sterge(i) == false);
      200:  100-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  100-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 200
    %%%%%:  100-block  2
call    5 never executed
        -:  101:    }
       1*:  102:    assert(m.dim() == 0);
        1:  102-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  102-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  102-block  2
call    5 never executed
        -:  103:
      101:  104:    for (int i = -100; i < 100; i = i + 2) { //adaugam elemente din 2 in 2 (numere pare)
        1:  104-block  0
      100:  104-block  1
      101:  104-block  2
branch  0 taken 100
branch  1 taken 1 (fallthrough)
      100:  105:        m.adauga(i);
      100:  105-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
        -:  106:    }
      201:  107:    for (int i = -100; i < 100; i++) { //stergem tot (inclusiv elemente inexistente)
        1:  107-block  0
      200:  107-block  1
      201:  107-block  2
branch  0 taken 200
branch  1 taken 1 (fallthrough)
      200:  108:        if (i % 2 == 0) {
      200:  108-block  0
branch  0 taken 100 (fallthrough)
branch  1 taken 100
     100*:  109:            assert(m.sterge(i) == true);
      100:  109-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:  109-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 100
    %%%%%:  109-block  2
call    5 never executed
        -:  110:        }
        -:  111:        else {
     100*:  112:            assert(m.sterge(i) == false);
      100:  112-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:  112-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 100
    %%%%%:  112-block  2
call    5 never executed
        -:  113:        }
        -:  114:    }
       1*:  115:    assert(m.dim() == 0);
        1:  115-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  115-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  115-block  2
call    5 never executed
        -:  116:
      102:  117:    for (int i = -100; i <= 100; i = i + 2) { //adaugam elemente din 2 in 2
        1:  117-block  0
      101:  117-block  1
      102:  117-block  2
branch  0 taken 101
branch  1 taken 1 (fallthrough)
      101:  118:        m.adauga(i);
      101:  118-block  0
call    0 returned 101
branch  1 taken 101 (fallthrough)
branch  2 taken 0 (throw)
        -:  119:    }
        -:  120:
      201:  121:    for (int i = 100; i > -100; i--) { //stergem descrescator (in ordine inversa fata de ordinea adaugarii)
        1:  121-block  0
      200:  121-block  1
      201:  121-block  2
branch  0 taken 200
branch  1 taken 1 (fallthrough)
      200:  122:        if (i % 2 == 0) {
      200:  122-block  0
branch  0 taken 100 (fallthrough)
branch  1 taken 100
     100*:  123:            assert(m.sterge(i) == true);
      100:  123-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:  123-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 100
    %%%%%:  123-block  2
call    5 never executed
        -:  124:        }
        -:  125:        else {
     100*:  126:            assert(m.sterge(i) == false);
      100:  126-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
      100:  126-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 100
    %%%%%:  126-block  2
call    5 never executed
        -:  127:        }
        -:  128:    }
       1*:  129:    assert(m.dim() == 1);
        1:  129-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  129-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  129-block  2
call    5 never executed
        -:  130:
        1:  131:    m.sterge(-100);
        1:  131-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  132:    assert(m.dim() == 0);
        1:  132-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  132-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  132-block  2
call    5 never executed
        -:  133:
      201:  134:    for (int i = -100; i < 100; i++) { //adaugam de 5 ori pe fiecare element
        1:  134-block  0
      200:  134-block  1
      201:  134-block  2
branch  0 taken 200
branch  1 taken 1 (fallthrough)
      200:  135:        m.adauga(i);
      200:  135-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  136:        m.adauga(i);
      200:  136-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  137:        m.adauga(i);
      200:  137-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  138:        m.adauga(i);
      200:  138-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  139:        m.adauga(i);
      200:  139-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
        -:  140:    }
        -:  141:
       1*:  142:    assert(m.dim() == 200);
        1:  142-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  142-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  142-block  2
call    5 never executed
      401:  143:    for (int i = -200; i < 200; i++) { //stergem elemente inexistente si existente
        1:  143-block  0
      400:  143-block  1
      401:  143-block  2
branch  0 taken 400
branch  1 taken 1 (fallthrough)
      400:  144:        if (i < -100 || i >= 100) {
      400:  144-block  0
branch  0 taken 300 (fallthrough)
branch  1 taken 100
      300:  144-block  1
branch  2 taken 100 (fallthrough)
branch  3 taken 200
     200*:  145:            assert(m.sterge(i) == false);
      200:  145-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  145-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 200
    %%%%%:  145-block  2
call    5 never executed
        -:  146:        }
        -:  147:        else {
     200*:  148:            assert(m.sterge(i) == true);
      200:  148-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  148-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 200
    %%%%%:  148-block  2
call    5 never executed
     200*:  149:            assert(m.sterge(i) == false);
      200:  149-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  149-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 200
    %%%%%:  149-block  2
call    5 never executed
        -:  150:        }
        -:  151:    }
       1*:  152:    assert(m.dim() == 0);
        1:  152-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  152-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  152-block  2
call    5 never executed
        -:  153:
        1:  154:}
        1:  154-block  0
call    0 returned 1
    $$$$$:  154-block  1
call    1 never executed
        -:  155:
        -:  156:
function _Z12testIteratorv called 1 returned 100% blocks executed 77%
        1:  157:void testIterator() {
        1:  158:    Multime m;
        1:  158-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  159:    IteratorMultime im = m.iterator(); //iterator pe multime vida
        1:  159-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  160:    assert(im.valid() == false);
        1:  160-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  160-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  160-block  2
call    5 never executed
        -:  161:
      101:  162:    for (int i = 0; i < 100; i++) {  //adaug de 100 de ori valoarea 33
        1:  162-block  0
      100:  162-block  1
      101:  162-block  2
branch  0 taken 100
branch  1 taken 1 (fallthrough)
      100:  163:        m.adauga(33);
      100:  163-block  0
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0 (throw)
        -:  164:    }
       1*:  165:    assert(m.dim()==1);
        1:  165-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  165-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  165-block  2
call    5 never executed
        -:  166:
        1:  167:    IteratorMultime im2 = m.iterator(); //daca iterez, doar 33 poate sa-mi dea iteratorul
        1:  167-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  168:    assert(im2.valid() == true);
        1:  168-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  168-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  168-block  2
call    5 never executed
        1:  169:    TElem elem = im2.element();
        1:  169-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  170:    assert(elem == 33);
        1:  170-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  170-block  1
call    2 never executed
        1:  171:    im2.urmator();
        1:  171-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  172:    assert(im2.valid() == false);
        1:  172-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  172-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  172-block  2
call    5 never executed
        -:  173:
        1:  174:    im2.prim(); //resetam pe primul elemente
        1:  174-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  175:    assert(im2.valid() == true);
        1:  175-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  175-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  175-block  2
call    5 never executed
        -:  176:
        1:  177:    Multime m2;
        1:  177-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
      201:  178:    for (int i = -100; i < 100; i++) { //adaug 200 de elemente, fiecare de 3 ori
        1:  178-block  0
      200:  178-block  1
      201:  178-block  2
branch  0 taken 200
branch  1 taken 1 (fallthrough)
      200:  179:        m2.adauga(i);
      200:  179-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  180:        m2.adauga(i);
      200:  180-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
      200:  181:        m2.adauga(i);
      200:  181-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
        -:  182:    }
        -:  183:
        1:  184:    IteratorMultime im3 = m2.iterator();
        1:  184-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  185:    assert(im3.valid() == true);
        1:  185-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  185-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  185-block  2
call    5 never executed
      201:  186:    for (int i = 0; i < 200; i++) {
        1:  186-block  0
      200:  186-block  1
      201:  186-block  2
branch  0 taken 200
branch  1 taken 1 (fallthrough)
        -:  187:        //TElem e1 = im3.element();
      200:  188:        im3.urmator();
      200:  188-block  0
call    0 returned 200
branch  1 taken 200 (fallthrough)
branch  2 taken 0 (throw)
        -:  189:    }
       1*:  190:    assert(im3.valid() == false);
        1:  190-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  190-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  190-block  2
call    5 never executed
        1:  191:    im3.prim();
        1:  191-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  192:    assert(im3.valid() == true);
        1:  192-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  192-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  192-block  2
call    5 never executed
        -:  193:
        1:  194:    Multime m3;
        1:  194-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       51:  195:    for (int i = 0; i < 200; i= i + 4) { //adaugam doar multipli de 4
        1:  195-block  0
       50:  195-block  1
       51:  195-block  2
branch  0 taken 50
branch  1 taken 1 (fallthrough)
       50:  196:        m3.adauga(i);
       50:  196-block  0
call    0 returned 50
branch  1 taken 50 (fallthrough)
branch  2 taken 0 (throw)
        -:  197:    }
        -:  198:
        1:  199:    IteratorMultime im4 = m3.iterator();
        1:  199-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  200:    assert(im4.valid() == true);
        1:  200-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  200-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  200-block  2
call    5 never executed
        1:  201:    int count = 0;
       51:  202:    while (im4.valid()) { //fiecare element e multiplu de 4 si sunt in total 50 de elemente
        1:  202-block  0
       51:  202-block  1
call    0 returned 51
branch  1 taken 51 (fallthrough)
branch  2 taken 0 (throw)
       51:  202-block  2
branch  3 taken 50
branch  4 taken 1 (fallthrough)
       50:  203:        TElem e = im4.element();
       50:  203-block  0
call    0 returned 50
branch  1 taken 50 (fallthrough)
branch  2 taken 0 (throw)
      50*:  204:        assert(e % 4 == 0);
       50:  204-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 50
    %%%%%:  204-block  1
call    2 never executed
       50:  205:        im4.urmator();
       50:  205-block  0
call    0 returned 50
branch  1 taken 50 (fallthrough)
branch  2 taken 0 (throw)
       50:  206:        count++;
       50:  206-block  0
        -:  207:    }
       1*:  208:    assert(count == 50);
        1:  208-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  208-block  1
call    2 never executed
        1:  209:}
        1:  209-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
    $$$$$:  209-block  1
call    3 never executed
    $$$$$:  209-block  2
call    4 never executed
    $$$$$:  209-block  3
call    5 never executed
        -:  210:
        -:  211:
        -:  212:
function _Z12testQuantityv called 1 returned 100% blocks executed 85%
        1:  213:void testQuantity() {//scopul e sa adaugam multe date
        1:  214:    Multime m;
        1:  214-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       11:  215:    for (int i = 10; i >= 1; i--) {
        1:  215-block  0
       10:  215-block  1
       11:  215-block  2
branch  0 taken 10
branch  1 taken 1 (fallthrough)
   175749:  216:        for (int j = -30000; j < 30000; j = j + i) {
       10:  216-block  0
   175739:  216-block  1
   175749:  216-block  2
branch  0 taken 175739
branch  1 taken 10 (fallthrough)
   175739:  217:            m.adauga(j);
   175739:  217-block  0
call    0 returned 175739
branch  1 taken 175739 (fallthrough)
branch  2 taken 0 (throw)
        -:  218:        }
        -:  219:    }
       1*:  220:    assert(m.dim() == 60000);
        1:  220-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  220-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  220-block  2
call    5 never executed
        1:  221:    IteratorMultime im = m.iterator();
        1:  221-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:  222:    assert(im.valid() == true);
        1:  222-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  222-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  222-block  2
call    5 never executed
    60001:  223:    for (int i = 0; i < m.dim(); i++) {
        1:  223-block  0
    60000:  223-block  1
    60001:  223-block  2
call    0 returned 60001
branch  1 taken 60001 (fallthrough)
branch  2 taken 0 (throw)
    60001:  223-block  3
branch  3 taken 60000
branch  4 taken 1 (fallthrough)
    60000:  224:        im.urmator();
    60000:  224-block  0
call    0 returned 60000
branch  1 taken 60000 (fallthrough)
branch  2 taken 0 (throw)
        -:  225:    }
        1:  226:    im.prim();
        1:  226-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
    60001:  227:    while (im.valid()) { //fiecare element returnat de iterator trebuie sa fie in multime
        1:  227-block  0
    60001:  227-block  1
call    0 returned 60001
branch  1 taken 60001 (fallthrough)
branch  2 taken 0 (throw)
    60001:  227-block  2
branch  3 taken 60000
branch  4 taken 1 (fallthrough)
    60000:  228:        TElem e = im.element();
    60000:  228-block  0
call    0 returned 60000
branch  1 taken 60000 (fallthrough)
branch  2 taken 0 (throw)
   60000*:  229:        assert(m.cauta(e) == true);
    60000:  229-block  0
call    0 returned 60000
branch  1 taken 60000 (fallthrough)
branch  2 taken 0 (throw)
    60000:  229-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 60000
    %%%%%:  229-block  2
call    5 never executed
    60000:  230:        im.urmator();
    60000:  230-block  0
call    0 returned 60000
branch  1 taken 60000 (fallthrough)
branch  2 taken 0 (throw)
        -:  231:    }
       1*:  232:    assert(im.valid() == false);
        1:  232-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  232-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  232-block  2
call    5 never executed
       11:  233:    for (int i = 0; i < 10; i++) { //stergem multe elemente existente si inexistente
        1:  233-block  0
       10:  233-block  1
       11:  233-block  2
branch  0 taken 10
branch  1 taken 1 (fallthrough)
   800020:  234:        for (int j = 40000; j >= -40000; j--) {
       10:  234-block  0
   800010:  234-block  1
   800020:  234-block  2
branch  0 taken 800010
branch  1 taken 10 (fallthrough)
   800010:  235:            m.sterge(j);
   800010:  235-block  0
call    0 returned 800010
branch  1 taken 800010 (fallthrough)
branch  2 taken 0 (throw)
        -:  236:        }
        -:  237:    }
       1*:  238:    assert(m.dim() == 0);
        1:  238-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  238-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:  238-block  2
call    5 never executed
        1:  239:}
        1:  239-block  0
call    0 returned 1
    $$$$$:  239-block  1
call    1 never executed
        -:  240:
        -:  241:
        -:  242:// nu stim reprezentarea multimii, putem testa doar anumite lucruri generale, nu stim in ce ordine vor fi afisate elementele.
function _Z13testAllExtinsv called 1 returned 100% blocks executed 100%
        1:  243:void testAllExtins() {
        -:  244:
        1:  245:    testCreeaza();
        1:  245-block  0
call    0 returned 1
        1:  246:    testAdauga();
call    0 returned 1
        1:  247:    testSterge();
call    0 returned 1
        1:  248:    testIterator();
call    0 returned 1
        1:  249:    testQuantity();
call    0 returned 1
        -:  250:
        1:  251:}
