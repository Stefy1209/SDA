        -:    0:Source:/home/stefy0-0/CLionProjects/SAD/TAD Multime/TestScurt.cpp
        -:    0:Graph:/home/stefy0-0/CLionProjects/SAD/TAD Multime/cmake-build-debug-coverage/CMakeFiles/TAD_Multime.dir/TestScurt.cpp.gcno
        -:    0:Data:/home/stefy0-0/CLionProjects/SAD/TAD Multime/cmake-build-debug-coverage/CMakeFiles/TAD_Multime.dir/TestScurt.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by stefy0-0 on 14.03.2024.
        -:    3://
        -:    4:
        -:    5:#include "TestScurt.h"
        -:    6:#include "Multime.h"
        -:    7:#include "IteratorMultime.h"
        -:    8:#include <assert.h>
        -:    9:#include <iostream>
        -:   10:
function _Z7testAllv called 1 returned 100% blocks executed 75%
        1:   11:void testAll() { //apelam fiecare functie sa vedem daca exista
        -:   12:    int vverif[5];
        -:   13:    int iverif;
        -:   14:    TElem e;
        -:   15:
        1:   16:    Multime m1;
        1:   16-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   17:    assert(m1.adauga(5)==true);
        1:   17-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   17-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   17-block  2
call    5 never executed
       1*:   18:    assert(m1.adauga(1)==true);
        1:   18-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   18-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   18-block  2
call    5 never executed
       1*:   19:    assert(m1.adauga(10)==true);
        1:   19-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   19-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   19-block  2
call    5 never executed
        1:   20:    IteratorMultime im1 =  m1.iterator();
        1:   20-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   21:    im1.prim();
        1:   21-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   22:    iverif=0;
        1:   23:    e=im1.element();
        1:   23-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   24:    vverif[iverif++] = e;
        1:   25:    im1.urmator();
        1:   25-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:   26:    while (im1.valid()) {
        1:   26-block  0
        3:   26-block  1
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   26-block  2
branch  3 taken 2
branch  4 taken 1 (fallthrough)
       2*:   27:        assert(rel(e,im1.element()));
        2:   27-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   27-block  1
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
        2:   27-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 2
    %%%%%:   27-block  3
call    8 never executed
        2:   28:        e = im1.element();
        2:   28-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   29:        vverif[iverif++] = e;
        2:   30:        im1.urmator();
        2:   30-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   31:    }
       1*:   32:    assert((vverif[0]==1) &&(vverif[1]==5)&&(vverif[2]==10));
        1:   32-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   32-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   32-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 0
    %%%%%:   32-block  3
call    6 never executed
        -:   33:
        -:   34:
        1:   35:    Multime m;
        1:   35-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   36:    //return;
       1*:   37:    assert(m.vida() == true);
        1:   37-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   37-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   37-block  2
call    5 never executed
       1*:   38:    assert(m.dim() == 0); //adaug niste elemente
        1:   38-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   38-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   38-block  2
call    5 never executed
       1*:   39:    assert(m.adauga(5)==true);
        1:   39-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   39-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   39-block  2
call    5 never executed
       1*:   40:    assert(m.adauga(1)==true);
        1:   40-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   40-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   40-block  2
call    5 never executed
       1*:   41:    assert(m.adauga(10)==true);
        1:   41-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   41-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   41-block  2
call    5 never executed
       1*:   42:    assert(m.adauga(7)==true);
        1:   42-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   42-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   42-block  2
call    5 never executed
       1*:   43:    assert(m.adauga(1)==false);
        1:   43-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   43-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   43-block  2
call    5 never executed
       1*:   44:    assert(m.adauga(10)==false);
        1:   44-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   44-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   44-block  2
call    5 never executed
       1*:   45:    assert(m.adauga(-3)==true);
        1:   45-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   45-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   45-block  2
call    5 never executed
       1*:   46:    assert(m.dim() == 5);
        1:   46-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   46-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   46-block  2
call    5 never executed
       1*:   47:    assert(m.cauta(10) == true);
        1:   47-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   47-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   47-block  2
call    5 never executed
       1*:   48:    assert(m.cauta(16) == false);
        1:   48-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   48-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   48-block  2
call    5 never executed
       1*:   49:    assert(m.sterge(1) == true);
        1:   49-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   49-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   49-block  2
call    5 never executed
       1*:   50:    assert(m.sterge(6) == false);
        1:   50-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   50-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   50-block  2
call    5 never executed
       1*:   51:    assert(m.dim() == 4);
        1:   51-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   51-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   51-block  2
call    5 never executed
        -:   52:
        1:   53:    IteratorMultime im = m.iterator();
        1:   53-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   54:    iverif=0;
        1:   55:    im.prim();
        1:   55-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   56:    e = im.element();
        1:   56-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   57:    vverif[iverif++] = e;
        1:   58:    im.urmator();
        1:   58-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        4:   59:    while (im.valid()) {
        1:   59-block  0
        4:   59-block  1
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:   59-block  2
branch  3 taken 3
branch  4 taken 1 (fallthrough)
       3*:   60:        assert(rel(e,im.element()));
        3:   60-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   60-block  1
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0 (throw)
        3:   60-block  2
branch  6 taken 0 (fallthrough)
branch  7 taken 3
    %%%%%:   60-block  3
call    8 never executed
        3:   61:        e = im.element();
        3:   61-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   62:        vverif[iverif++] = e;
        3:   63:        im.urmator();
        3:   63-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        -:   64:    }
        -:   65:
        1:   66:    --iverif;
        1:   67:    im.anterior();
        1:   67-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        5:   68:    while(im.valid()) {
        1:   68-block  0
        5:   68-block  1
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
        5:   68-block  2
branch  3 taken 4
branch  4 taken 1 (fallthrough)
       4*:   69:        assert(vverif[iverif--] == im.element());
        4:   69-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        4:   69-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 4
    %%%%%:   69-block  2
call    5 never executed
        4:   70:        im.anterior();
        4:   70-block  0
call    0 returned 4
branch  1 taken 4 (fallthrough)
branch  2 taken 0 (throw)
        -:   71:    }
        -:   72:
       1*:   73:    assert((vverif[3]==10) &&(vverif[2]==7)&&(vverif[1]==5)&&(vverif[0]==-3));
        1:   73-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   73-block  1
branch  2 taken 1 (fallthrough)
branch  3 taken 0
        1:   73-block  2
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:   73-block  3
branch  6 taken 1 (fallthrough)
branch  7 taken 0
    %%%%%:   73-block  4
call    8 never executed
        -:   74:
        1:   75:}
        1:   75-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:   75-block  1
call    2 never executed
    $$$$$:   75-block  2
call    3 never executed
