        -:    0:Source:/home/stefy0-0/CLionProjects/SAD/TAD MultiDictionar Ordonat/TestExtins.cpp
        -:    0:Graph:/home/stefy0-0/CLionProjects/SAD/TAD MultiDictionar Ordonat/cmake-build-debug-coverage/CMakeFiles/TAD_MultiDictionar_Ordonat.dir/TestExtins.cpp.gcno
        -:    0:Data:/home/stefy0-0/CLionProjects/SAD/TAD MultiDictionar Ordonat/cmake-build-debug-coverage/CMakeFiles/TAD_MultiDictionar_Ordonat.dir/TestExtins.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <exception>
        -:    2:#include <assert.h>
        -:    3:#include <algorithm>
        -:    4:#include <vector>
        -:    5:#include "IteratorMDO.h"
        -:    6:#include "MDO.h"
        -:    7:#include "TestExtins.h"
        -:    8:
        -:    9:using namespace std;
        -:   10:
function _Z5crescii called 24982 returned 100% blocks executed 100%
    24982:   11:bool cresc(TCheie c1, TCheie c2) {
    24982:   12:	if (c1 <= c2) {
    24982:   12-block  0
branch  0 taken 24765 (fallthrough)
branch  1 taken 217
    24765:   13:		return true;
    24765:   13-block  0
        -:   14:	} else {
      217:   15:		return false;
      217:   15-block  0
        -:   16:	}
        -:   17:}
        -:   18:
function _Z4descii called 22693 returned 100% blocks executed 100%
    22693:   19:bool desc(TCheie c1, TCheie c2) {
    22693:   20:	if (c1 >= c2) {
    22693:   20-block  0
branch  0 taken 22458 (fallthrough)
branch  1 taken 235
    22458:   21:		return true;
    22458:   21-block  0
        -:   22:	} else {
      235:   23:		return false;
      235:   23-block  0
        -:   24:	}
        -:   25:}
        -:   26:
function _Z11testCreeazav called 1 returned 100% blocks executed 73%
        1:   27:void testCreeaza() {
        1:   28:	MDO d = MDO(cresc);
        1:   28-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   29:	assert(d.dim() == 0);
        1:   29-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   29-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   29-block  2
call    5 never executed
       1*:   30:	assert(d.vid());
        1:   30-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   30-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   30-block  2
call    5 never executed
        -:   31:
        -:   32:	//IteratorMDO it = d.iterator();
        -:   33:	//it.prim();
        -:   34:	//assert(!it.valid());
        -:   35:
       11:   36:	for (int i = 0; i < 10; i++) {
        1:   36-block  0
       11:   36-block  1
branch  0 taken 10
branch  1 taken 1 (fallthrough)
       10:   37:        vector<TValoare> v= d.cauta(i);
       10:   37-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
      10*:   38:        assert(v.size()==0);
       10:   38-block  0
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10
    %%%%%:   38-block  1
call    3 never executed
       10:   39:	}
       10:   39-block  0
call    0 returned 10
        -:   40:
       21:   41:	for (int i = -10; i < 10; i++) {
        1:   41-block  0
       21:   41-block  1
branch  0 taken 20
branch  1 taken 1 (fallthrough)
       20:   42:		vector<TValoare> v= d.cauta(i);
       20:   42-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
      20*:   43:        assert(v.size()==0);
       20:   43-block  0
call    0 returned 20
branch  1 taken 0 (fallthrough)
branch  2 taken 20
    %%%%%:   43-block  1
call    3 never executed
       20:   44:	}
       20:   44-block  0
call    0 returned 20
        1:   45:}
        1:   45-block  0
call    0 returned 1
    $$$$$:   45-block  1
call    1 never executed
        -:   46:
function _Z9testCautaPFbiiE called 2 returned 100% blocks executed 79%
        2:   47:void testCauta(Relatie r) {
        2:   48:	MDO d = MDO(r);
        2:   48-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   49:	int cMin = 0;
        2:   50:	int cMax = 10;
       24:   51:	for (int i = cMin; i <= cMax; i++) {
        2:   51-block  0
       22:   51-block  1
       24:   51-block  2
branch  0 taken 22
branch  1 taken 2 (fallthrough)
       22:   52:			d.adauga(i, i + 1);
       22:   52-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:   53:			d.adauga(i, i + 2);
       22:   53-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
        -:   54:	}
        2:   55:	int intervalDim = 10;
       24:   56:	for (int i = cMin; i <= cMax; i++) {
        2:   56-block  0
       24:   56-block  1
branch  0 taken 22
branch  1 taken 2 (fallthrough)
       22:   57:        vector<TValoare> v= d.cauta(i);
       22:   57-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
      22*:   58:        assert(v.size()==2);
       22:   58-block  0
call    0 returned 22
branch  1 taken 0 (fallthrough)
branch  2 taken 22
    %%%%%:   58-block  1
call    3 never executed
       22:   59:	}
       22:   59-block  0
call    0 returned 22
       22:   60:	for (int i = cMin - intervalDim; i < cMin; i++) {
        2:   60-block  0
       22:   60-block  1
branch  0 taken 20
branch  1 taken 2 (fallthrough)
       20:   61:        vector<TValoare> v= d.cauta(i);
       20:   61-block  0
call    0 returned 20
branch  1 taken 20 (fallthrough)
branch  2 taken 0 (throw)
      20*:   62:        assert(v.size()==0);
       20:   62-block  0
call    0 returned 20
branch  1 taken 0 (fallthrough)
branch  2 taken 20
    %%%%%:   62-block  1
call    3 never executed
       20:   63:	}
       20:   63-block  0
call    0 returned 20
       20:   64:	for (int i = cMax + 1; i < cMax + intervalDim; i++) {
        2:   64-block  0
       20:   64-block  1
branch  0 taken 18
branch  1 taken 2 (fallthrough)
       18:   65:        vector<TValoare> v= d.cauta(i);
       18:   65-block  0
call    0 returned 18
branch  1 taken 18 (fallthrough)
branch  2 taken 0 (throw)
      18*:   66:        assert(v.size()==0);
       18:   66-block  0
call    0 returned 18
branch  1 taken 0 (fallthrough)
branch  2 taken 18
    %%%%%:   66-block  1
call    3 never executed
       18:   67:	}
       18:   67-block  0
call    0 returned 18
        -:   68:
        2:   69:    d.goleste();
        2:   69-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:   70:    assert(d.vid());
        2:   70-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   70-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:   70-block  2
call    5 never executed
        2:   71:}
        2:   71-block  0
call    0 returned 2
    $$$$$:   71-block  1
call    1 never executed
        -:   72:
function _Z9testCautav called 1 returned 100% blocks executed 100%
        1:   73:void testCauta() {
        1:   74:	testCauta(cresc);
        1:   74-block  0
call    0 returned 1
        1:   75:	testCauta(desc);
call    0 returned 1
        1:   76:}
        -:   77:
function _Z22populeazaMDOVidIdenticR3MDOii called 2 returned 100% blocks executed 100%
        2:   78:void populeazaMDOVidIdentic(MDO& mdo, int min, int max) {
       24:   79:	for (int i = min; i <= max; i++) {
        2:   79-block  0
       22:   79-block  1
       24:   79-block  2
branch  0 taken 22
branch  1 taken 2 (fallthrough)
       22:   80:        mdo.adauga(i, i);
       22:   80-block  0
call    0 returned 22
       22:   81:		if (i%2 ==0)
branch  0 taken 12 (fallthrough)
branch  1 taken 10
       12:   82:            mdo.adauga(i, i+2); //cheile pare le adaug de 2 ori
       12:   82-block  0
call    0 returned 12
        -:   83:	}
        2:   84:}
        -:   85:
function _Z15testStergeCautaPFbiiE called 2 returned 100% blocks executed 76%
        2:   86:void testStergeCauta(Relatie r) {
        2:   87:	MDO d = MDO(r);
        2:   87-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   88:	int min = 10;
        2:   89:	int max = 20;
        2:   90:	populeazaMDOVidIdentic(d, min, max);
        2:   90-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       24:   91:	for (int c = min; c <= max; c++) {
        2:   91-block  0
       22:   91-block  1
       24:   91-block  2
branch  0 taken 22
branch  1 taken 2 (fallthrough)
      22*:   92:		assert(d.sterge(c, c+1) == false);
       22:   92-block  0
call    0 returned 22
branch  1 taken 22 (fallthrough)
branch  2 taken 0 (throw)
       22:   92-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 22
    %%%%%:   92-block  2
call    5 never executed
       22:   93:		if (c%2==0)
       22:   93-block  0
branch  0 taken 12 (fallthrough)
branch  1 taken 10
      12*:   94:            assert(d.sterge(c,c) == true);
       12:   94-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12:   94-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 12
    %%%%%:   94-block  2
call    5 never executed
        -:   95:	}
        -:   96:	//raman doar cheile impare, o singura data
       24:   97:	for (int c = min; c <= max; c++) {
        2:   97-block  0
       22:   97-block  1
       24:   97-block  2
branch  0 taken 22
branch  1 taken 2 (fallthrough)
       22:   98:		if (c%2==1){
       22:   98-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 12
      10*:   99:            assert(d.sterge(c,c+1) == false);
       10:   99-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:   99-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 10
    %%%%%:   99-block  2
call    5 never executed
      10*:  100:            assert(d.sterge(c,c) == true);
       10:  100-block  0
call    0 returned 10
branch  1 taken 10 (fallthrough)
branch  2 taken 0 (throw)
       10:  100-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 10
    %%%%%:  100-block  2
call    5 never executed
        -:  101:		}
        -:  102:        else{
      12*:  103:              assert(d.sterge(c,c+2) == true);
       12:  103-block  0
call    0 returned 12
branch  1 taken 12 (fallthrough)
branch  2 taken 0 (throw)
       12:  103-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 12
    %%%%%:  103-block  2
call    5 never executed
        -:  104:        }
        -:  105:	}
        -:  106:    //MDO devine vid
       2*:  107:	assert(d.dim() == 0);
        2:  107-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  107-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  107-block  2
call    5 never executed
        2:  108:}
        2:  108-block  0
call    0 returned 2
    $$$$$:  108-block  1
call    1 never executed
        -:  109:
function _Z10testStergev called 1 returned 100% blocks executed 100%
        1:  110:void testSterge() {
        1:  111:	testStergeCauta(cresc);
        1:  111-block  0
call    0 returned 1
        1:  112:	testStergeCauta(desc);
call    0 returned 1
        1:  113:}
        -:  114:
        -:  115://genereaza un vector continand in ordine aleatoare valorile naturale din intervalul inchis [cMin, cMax]
function _Z21cheiInOrdineAleatoareii called 2 returned 100% blocks executed 89%
        2:  116:vector<int> cheiInOrdineAleatoare(int cMin, int cMax) {
        2:  117:	vector<int> chei;
        2:  117-block  0
call    0 returned 2
      404:  118:	for (int c = cMin; c <= cMax; c++) {
      402:  118-block  0
      404:  118-block  1
branch  0 taken 402
branch  1 taken 2 (fallthrough)
      402:  119:		chei.push_back(c);
      402:  119-block  0
call    0 returned 402
branch  1 taken 402 (fallthrough)
branch  2 taken 0 (throw)
        -:  120:	}
        2:  121:	int n = chei.size();
        2:  121-block  0
call    0 returned 2
      402:  122:	for (int i = 0; i < n - 1; i++) {
      402:  122-block  0
branch  0 taken 400
branch  1 taken 2 (fallthrough)
      400:  123:		int j = i + rand() % (n - i);
      400:  123-block  0
call    0 returned 400
      400:  124:		swap(chei[i], chei[j]);
call    0 returned 400
call    1 returned 400
call    2 returned 400
        -:  125:	}
        2:  126:	return chei;
        2:  126-block  0
        2:  126-block  1
    =====:  127:}
    $$$$$:  127-block  0
call    0 never executed
        -:  128:
        -:  129:
function _Z12testIteratorPFbiiE called 2 returned 100% blocks executed 80%
        2:  130:void testIterator(Relatie r) {
        2:  131:	MDO d = MDO(r);
        2:  131-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  132:	IteratorMDO it = d.iterator();
        2:  132-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:  133:	assert(!it.valid());
        2:  133-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  133-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  133-block  2
call    5 never executed
        2:  134:	it.prim();
        2:  134-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:  135:	assert(!it.valid());
        2:  135-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  135-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  135-block  2
call    5 never executed
        2:  136:	int cMin = 100;
        2:  137:	int cMax = 300;
        2:  138:	vector<int> chei = cheiInOrdineAleatoare(cMin, cMax);
        2:  138-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  139:	int n = chei.size();
        2:  139-block  0
call    0 returned 2
      404:  140:	for (int i = 0; i < n; i++) {
      402:  140-block  0
      404:  140-block  1
branch  0 taken 402
branch  1 taken 2 (fallthrough)
      402:  141:      d.adauga(chei[i], 100);
      402:  141-block  0
call    0 returned 402
call    1 returned 402
branch  2 taken 402 (fallthrough)
branch  3 taken 0 (throw)
      402:  142:	  if (chei[i]%2==0)	{
      402:  142-block  0
call    0 returned 402
branch  1 taken 202 (fallthrough)
branch  2 taken 200
      202:  143:		d.adauga(chei[i], 200);
      202:  143-block  0
call    0 returned 202
call    1 returned 202
branch  2 taken 202 (fallthrough)
branch  3 taken 0 (throw)
        -:  144:	  }
        -:  145:	}
        -:  146:
        2:  147:	IteratorMDO itD = d.iterator();
        2:  147-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:  148:	assert(itD.valid());
        2:  148-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  148-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  148-block  2
call    5 never executed
        2:  149:	itD.prim();
        2:  149-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
       2*:  150:	assert(itD.valid());
        2:  150-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  150-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 2
    %%%%%:  150-block  2
call    5 never executed
        -:  151:
        2:  152:	TCheie cPrec = itD.element().first;
        2:  152-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:  153:
        2:  154:    itD.urmator();
        2:  154-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
      604:  155:	while (itD.valid()) {
        2:  155-block  0
      604:  155-block  1
call    0 returned 604
branch  1 taken 604 (fallthrough)
branch  2 taken 0 (throw)
      604:  155-block  2
branch  3 taken 602
branch  4 taken 2 (fallthrough)
      602:  156:		TCheie c = itD.element().first;
      602:  156-block  0
call    0 returned 602
branch  1 taken 602 (fallthrough)
branch  2 taken 0 (throw)
     602*:  157:		assert(r(cPrec, c));
      602:  157-block  0
call    0 returned 602
branch  1 taken 602 (fallthrough)
branch  2 taken 0 (throw)
      602:  157-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 602
    %%%%%:  157-block  2
call    5 never executed
      602:  158:		cPrec = c;
      602:  159:		itD.urmator();
      602:  159-block  0
call    0 returned 602
branch  1 taken 602 (fallthrough)
branch  2 taken 0 (throw)
        -:  160:	}
        2:  161:}
        2:  161-block  0
call    0 returned 2
call    1 returned 2
    $$$$$:  161-block  1
call    2 never executed
    $$$$$:  161-block  2
call    3 never executed
        -:  162:
function _Z12testIteratorv called 1 returned 100% blocks executed 100%
        1:  163:void testIterator() {
        1:  164:	testIterator(cresc);
        1:  164-block  0
call    0 returned 1
        1:  165:	testIterator(desc);
call    0 returned 1
        1:  166:}
        -:  167:
function _Z13testAllExtinsv called 1 returned 100% blocks executed 100%
        1:  168:void testAllExtins() {
        1:  169:	testCreeaza();
        1:  169-block  0
call    0 returned 1
        1:  170:	testCauta();
call    0 returned 1
        1:  171:	testSterge();
call    0 returned 1
        1:  172:	testIterator();
call    0 returned 1
        1:  173:}
