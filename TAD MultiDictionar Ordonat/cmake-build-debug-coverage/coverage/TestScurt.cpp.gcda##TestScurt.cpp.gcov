        -:    0:Source:/home/stefy0-0/CLionProjects/SAD/TAD MultiDictionar Ordonat/TestScurt.cpp
        -:    0:Graph:/home/stefy0-0/CLionProjects/SAD/TAD MultiDictionar Ordonat/cmake-build-debug-coverage/CMakeFiles/TAD_MultiDictionar_Ordonat.dir/TestScurt.cpp.gcno
        -:    0:Data:/home/stefy0-0/CLionProjects/SAD/TAD MultiDictionar Ordonat/cmake-build-debug-coverage/CMakeFiles/TAD_MultiDictionar_Ordonat.dir/TestScurt.cpp.gcda
        -:    0:Runs:1
        -:    1:#include <assert.h>
        -:    2:
        -:    3:#include "MDO.h"
        -:    4:#include "IteratorMDO.h"
        -:    5:
        -:    6:#include <exception>
        -:    7:#include <vector>
        -:    8:
        -:    9:using namespace std;
        -:   10:
function _Z8relatie1ii called 7 returned 100% blocks executed 75%
        7:   11:bool relatie1(TCheie cheie1, TCheie cheie2) {
        7:   12:	if (cheie1 <= cheie2) {
        7:   12-block  0
branch  0 taken 7 (fallthrough)
branch  1 taken 0
        7:   13:		return true;
        7:   13-block  0
        -:   14:	}
        -:   15:	else {
    #####:   16:		return false;
    %%%%%:   16-block  0
        -:   17:	}
        -:   18:}
        -:   19:
function _Z7testAllv called 1 returned 100% blocks executed 72%
        1:   20:void testAll(){
        1:   21:	MDO dictOrd = MDO(relatie1);
        1:   21-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   22:	assert(dictOrd.dim() == 0);
        1:   22-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   22-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   22-block  2
call    5 never executed
       1*:   23:	assert(dictOrd.vid());
        1:   23-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   23-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   23-block  2
call    5 never executed
        1:   24:    dictOrd.adauga(1,2);
        1:   24-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   25:    dictOrd.adauga(1,3);
        1:   25-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   26:    assert(dictOrd.dim() == 2);
        1:   26-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   26-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   26-block  2
call    5 never executed
       1*:   27:    assert(!dictOrd.vid());
        1:   27-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   27-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   27-block  2
call    5 never executed
        1:   28:    vector<TValoare> v= dictOrd.cauta(1);
        1:   28-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
       1*:   29:    assert(v.size()==2);
        1:   29-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   29-block  1
call    3 never executed
        1:   30:    v= dictOrd.cauta(3);
        1:   30-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   30-block  1
call    3 returned 1
call    4 returned 1
       1*:   31:    assert(v.size()==0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:   31-block  0
call    3 never executed
        1:   32:    IteratorMDO it = dictOrd.iterator();
        1:   32-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   33:    it.prim();
        1:   33-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        3:   34:    while (it.valid()){
        1:   34-block  0
        3:   34-block  1
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:   34-block  2
branch  3 taken 2
branch  4 taken 1 (fallthrough)
        2:   35:    	TElem e = it.element();
        2:   35-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   36:    	it.urmator();
        2:   36-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   37:    }
       1*:   38:    assert(dictOrd.sterge(1, 2) == true);
        1:   38-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   38-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   38-block  2
call    5 never executed
       1*:   39:    assert(dictOrd.sterge(1, 3) == true);
        1:   39-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   39-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   39-block  2
call    5 never executed
       1*:   40:    assert(dictOrd.sterge(2, 1) == false);
        1:   40-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   40-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   40-block  2
call    5 never executed
       1*:   41:    assert(dictOrd.vid());
        1:   41-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   41-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 1
    %%%%%:   41-block  2
call    5 never executed
        1:   42:}
        1:   42-block  0
call    0 returned 1
call    1 returned 1
    $$$$$:   42-block  1
call    2 never executed
    $$$$$:   42-block  2
call    3 never executed
        -:   43:
